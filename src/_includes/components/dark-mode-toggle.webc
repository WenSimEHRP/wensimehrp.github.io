<!-- Dark Mode Toggle Button -->
<div id="dark-mode-toggle"
  class="fixed top-20 right-4 z-50 bg-white dark:bg-gray-800 shadow-lg border border-gray-200 dark:border-gray-700 rounded-lg p-1 flex space-x-1 transition-all duration-300">
  <button id="light-mode-btn" class="p-2 rounded-md transition-colors hover:bg-gray-100 dark:hover:bg-gray-700 data-[active]:bg-gray-200 data-[active]:dark:bg-gray-600"
    aria-label="Light mode" data-theme="light">
    <i class="fa-solid fa-sun text-sm"></i>
  </button>

  <button id="dark-mode-btn" class="p-2 rounded-md transition-colors hover:bg-gray-100 dark:hover:bg-gray-700 data-[active]:bg-gray-200 data-[active]:dark:bg-gray-600"
    aria-label="Dark mode" data-theme="dark">
    <i class="fa-solid fa-moon text-sm"></i>
  </button>

  <button id="system-mode-btn" class="p-2 rounded-md transition-colors hover:bg-gray-100 dark:hover:bg-gray-700 data-[active]:bg-gray-200 data-[active]:dark:bg-gray-600"
    aria-label="System default" data-theme="system">
    <i class="fa-solid fa-desktop text-sm"></i>
  </button>
</div>

<script webc:keep>
  // Minimal theme toggle with simple positioning
  (function () {
    const buttons = document.querySelectorAll('[data-theme]');
    const toggle = document.getElementById('dark-mode-toggle');

    function getCurrentTheme() {
      return localStorage.getItem('theme') || 'system';
    }

    function applyTheme(theme) {
      if (theme === 'system') {
        localStorage.removeItem('theme');
        document.documentElement.classList.toggle('dark', window.matchMedia('(prefers-color-scheme: dark)').matches);
      } else {
        localStorage.setItem('theme', theme);
        document.documentElement.classList.toggle('dark', theme === 'dark');
      }

      // Update button states
      buttons.forEach(btn => {
        btn.toggleAttribute('data-active', btn.dataset.theme === theme);
      });
    }

    // Simple positioning: below header when header visible, top-right when not
    function updatePosition() {
      const header = document.querySelector('header');
      if (header) {
        const headerRect = header.getBoundingClientRect();
        if (headerRect.bottom > 0) {
          toggle.style.top = `${Math.max(headerRect.bottom + 16, 80)}px`;
        } else {
          toggle.style.top = '1rem';
        }
      }
    }

    // Initialize
    applyTheme(getCurrentTheme());
    updatePosition();

    // Add listeners
    buttons.forEach(btn => {
      btn.addEventListener('click', () => applyTheme(btn.dataset.theme));
    });

    // Update position on scroll (throttled)
    let ticking = false;
    window.addEventListener('scroll', () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          updatePosition();
          ticking = false;
        });
        ticking = true;
      }
    });

    // System theme changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
      if (getCurrentTheme() === 'system') {
        document.documentElement.classList.toggle('dark', e.matches);
      }
    });
  })();
</script>
